name: Run Consent Management Integ Tests
description: Run AWS CLI based integration tests against the Consent Management API

inputs:
  aws-account-id:
    description: AWS account to deploy to
    required: true
  aws-region:
    description: AWS region to deploy to
    required: true

runs:
  using: 'composite'
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/github-ci-role
    - name: Retrieve API Gateway ID for the Consent Management API
      id: get-consent-management-api-gateway-id
      run: |
        apiGatewayId=$(aws cloudformation list-exports \
          --region ${{ inputs.aws-region }} \
          --query "Exports[?Name == 'ConsentManagementApiGatewayId'].Value" \
          | jq .[0])
        echo "CONSENT_MANAGEMENT_API_GATEWAY_ID=${apiGatewayId}" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Get API Gateway resource IDs
      id: get-consent-management-api-resource-ids
      run: |
        apiGatewayResources=$(aws apigateway get-resources \
          --region ${{ inputs.aws-region }} \
          --rest-api-id ${{ steps.get-consent-management-api-gateway-id.outputs.CONSENT_MANAGEMENT_API_GATEWAY_ID }})
        listServiceUserConsentsResourceId=$(echo ${apiGatewayResources} | jq '.items.[] | select(.path == "/v1/consent-management/services/{serviceId}/users/{userId}/consents") | .id')
        echo "CONSENTS_API_RESOURCE_ID=${listServiceUserConsentsResourceId}" >> "$GITHUB_OUTPUT"
        serviceUserConsentResourceId=$(echo ${apiGatewayResources} | jq '.items.[] | select(.path == "/v1/consent-management/services/{serviceId}/users/{userId}/consents/{consentId}") | .id')
        echo "CONSENT_API_RESOURCE_ID=${serviceUserConsentResourceId}" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Test ListServiceUserConsents API
      run: |
        listApiResponse=$(aws apigateway test-invoke-method \
          --region ${{ inputs.aws-region }} \
          --rest-api-id ${{ steps.get-consent-management-api-gateway-id.outputs.CONSENT_MANAGEMENT_API_GATEWAY_ID }} \
          --resource-id ${{ steps.get-consent-management-api-resource-ids.outputs.CONSENTS_API_RESOURCE_ID }} \
          --http-method GET \
          --path-with-query-string "v1/consent-management/services/TestServiceId/users/TestUserId/consents")
        if [ "$(echo ${listApiResponse} | jq -e '.status == 200')" == "true" ]; then
          echo "ListServiceUserConsents API invocation succeeded"
        else
          echo "ListServiceUserConsents API invocation failed, response: ${listApiResponse}"
          exit 1
        fi
        listApiResponseBody=$(echo ${listApiResponse} | jq '.body')
        returnedConsents=$(echo ${listApiResponseBody} | sed 's/\\"/"/g' | sed 's/^"//;s/"$//' | jq .data)
        if [ "$(echo "${returnedConsents}" | jq 'type == "array"')" == "true" ]; then
          echo "ListServiceUserConsents API validation passed: successfully returned an array of consents"
        else
          echo "ListServiceUserConsents API validation failed: did not return an array of consents"
          echo "ListServiceUserConsents API response body: ${listApiResponseBody}"
          exit 1
        fi
      shell: bash
    - name: Test CreateServiceUserConsent API
      id: create-service-user-consent
      run: |
        createConsentApiResponse=$(aws apigateway test-invoke-method \
          --region ${{ inputs.aws-region }} \
          --rest-api-id ${{ steps.get-consent-management-api-gateway-id.outputs.CONSENT_MANAGEMENT_API_GATEWAY_ID }} \
          --resource-id ${{ steps.get-consent-management-api-resource-ids.outputs.CONSENTS_API_RESOURCE_ID }} \
          --http-method POST \
          --path-with-query-string "v1/consent-management/services/TestServiceId/users/TestUserId/consents" \
          --body "{\"status\":\"REVOKED\",\"consentType\":\"testConsentType\",\"consentData\":{\"testKey1\":\"testValue1\"}}")
        if [ "$(echo "${createConsentApiResponse}" | jq -e '.status == 200')" == "true" ]; then
          echo "CreateServiceUserConsent API invocation succeeded"
        else
          echo "CreateServiceUserConsent API invocation failed, response: ${createConsentApiResponse}"
          exit 1
        fi
        createConsentApiResponseBody=$(echo ${createConsentApiResponse} | jq '.body')
        returnedConsentId=$(echo ${createConsentApiResponseBody} | sed 's/\\"/"/g' | sed 's/^"//;s/"$//' | jq .consentId)
        if [ -n "$returnedConsentId" ]; then
          echo "CreateServiceUserConsent API validation passed: successfully returned consentId ${returnedConsentId}"
        else
          echo "CreateServiceUserConsent API validation failed: response did not include consentId"
          echo "CreateServiceUserConsent API response body: ${createConsentApiResponseBody}"
          exit 1
        fi
        echo "CREATED_CONSENT_ID=${returnedConsentId}" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Test GetServiceUserConsent API
      run: |
        getConsentApiResponse=$(aws apigateway test-invoke-method \
          --region ${{ inputs.aws-region }} \
          --rest-api-id ${{ steps.get-consent-management-api-gateway-id.outputs.CONSENT_MANAGEMENT_API_GATEWAY_ID }} \
          --resource-id ${{ steps.get-consent-management-api-resource-ids.outputs.CONSENT_API_RESOURCE_ID }} \
          --http-method GET \
          --path-with-query-string "v1/consent-management/services/TestServiceId/users/TestUserId/consents/${{ steps.create-service-user-consent.outputs.CREATED_CONSENT_ID }}")
        if [ "$(echo "${getConsentApiResponse}" | jq -e '.status == 200')" == "true" ]; then
          echo "GetServiceUserConsent API invocation succeeded"
        else
          echo "GetServiceUserConsent API invocation failed, response: ${getConsentApiResponse}"
          exit 1
        fi
        getConsentApiResponse=$(echo ${getConsentApiResponse} | jq '.body')
        returnedConsentData=$(echo ${getConsentApiResponse} | sed 's/\\"/"/g' | sed 's/^"//;s/"$//' | jq .data)
        if [ "$(echo "${returnedConsentData}" | jq 'type == "object"')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: did not return a consent object"
          echo "GetServiceUserConsent API response body: ${getConsentApiResponse}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.consentId == ${{ steps.create-service-user-consent.outputs.CREATED_CONSENT_ID }}')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: consent data did not match expected consentId ${{ steps.create-service-user-consent.outputs.CREATED_CONSENT_ID }}"
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.status == "REVOKED"')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: consent data did not match expected status \"REVOKED\""
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.consentType == "testConsentType"')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: consent data did not match expected consentType \"testConsentType\""
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        echo "GetServiceUserConsent API validation passed: successfully returned the expected consent"
      shell: bash
