name: Run Consent Framework Integ Tests
description: Run AWS CLI based integration tests against Consent Framework APIs

inputs:
  aws-account-id:
    description: AWS account to deploy to
    required: true
  aws-region:
    description: AWS region to deploy to
    required: true

runs:
  using: 'composite'
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/github-ci-role

    - name: Retrieve API Gateway ID for the Consent Management API
      id: get-consent-management-api-gateway-id
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        apiGatewayId=$(aws cloudformation list-exports \
          --region "$AWS_REGION" \
          --query "Exports[?Name == 'ConsentManagementApiGatewayId'].Value" \
          | jq .[0] --raw-output)
        echo "CONSENT_MANAGEMENT_API_GATEWAY_ID=${apiGatewayId}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Get API Gateway resource IDs for the Consent Management API
      id: get-consent-management-api-resource-ids
      env:
        API_GATEWAY_ID: ${{ steps.get-consent-management-api-gateway-id.outputs.CONSENT_MANAGEMENT_API_GATEWAY_ID }}
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        apiGatewayResources=$(aws apigateway get-resources \
          --region "$AWS_REGION" \
          --rest-api-id "$API_GATEWAY_ID")
        listServiceUserConsentsResourceId=$(echo ${apiGatewayResources} | \
          jq '.items.[] | select(.path == "/v1/consent-management/services/{serviceId}/users/{userId}/consents") | .id' --raw-output)
        echo "CONSENTS_API_RESOURCE_ID=${listServiceUserConsentsResourceId}" >> "$GITHUB_OUTPUT"
        serviceUserConsentResourceId=$(echo ${apiGatewayResources} | \
          jq '.items.[] | select(.path == "/v1/consent-management/services/{serviceId}/users/{userId}/consents/{consentId}") | .id' --raw-output)
        echo "CONSENT_API_RESOURCE_ID=${serviceUserConsentResourceId}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Test CreateServiceUserConsent API
      id: create-service-user-consent
      env:
        API_GATEWAY_ID: ${{ steps.get-consent-management-api-gateway-id.outputs.CONSENT_MANAGEMENT_API_GATEWAY_ID }}
        AWS_REGION: ${{ inputs.aws-region }}
        CONSENTS_API_RESOURCE_ID: ${{ steps.get-consent-management-api-resource-ids.outputs.CONSENTS_API_RESOURCE_ID }}
      run: |
        createConsentApiResponse=$(aws apigateway test-invoke-method \
          --region "$AWS_REGION" \
          --rest-api-id "$API_GATEWAY_ID" \
          --resource-id "$CONSENTS_API_RESOURCE_ID" \
          --http-method POST \
          --path-with-query-string "v1/consent-management/services/TestServiceId/users/TestUserId/consents" \
          --body "{\"status\":\"REVOKED\",\"consentType\":\"testConsentType\",\"consentData\":{\"testKey1\":\"testValue1\",\"testKey2\":\"testValue2\"}}")
        if [ "$(echo "${createConsentApiResponse}" | jq -e '.status == 200')" == "true" ]; then
          echo "CreateServiceUserConsent API invocation succeeded"
        else
          echo "CreateServiceUserConsent API invocation failed, response: ${createConsentApiResponse}"
          exit 1
        fi
        createConsentApiResponseBody=$(echo ${createConsentApiResponse} | jq '.body')
        returnedConsentId=$(echo ${createConsentApiResponseBody} | sed 's/\\"/"/g' | sed 's/^"//;s/"$//' | \
          jq .consentId --raw-output)
        if [ -n "$returnedConsentId" ]; then
          echo "CreateServiceUserConsent API validation passed: successfully returned consentId ${returnedConsentId}"
        else
          echo "CreateServiceUserConsent API validation failed: response did not include consentId"
          echo "CreateServiceUserConsent API response body: ${createConsentApiResponseBody}"
          exit 1
        fi
        echo "CREATED_CONSENT_ID=${returnedConsentId}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Test GetServiceUserConsent API
      env:
        API_GATEWAY_ID: ${{ steps.get-consent-management-api-gateway-id.outputs.CONSENT_MANAGEMENT_API_GATEWAY_ID }}
        AWS_REGION: ${{ inputs.aws-region }}
        CONSENT_API_RESOURCE_ID: ${{ steps.get-consent-management-api-resource-ids.outputs.CONSENT_API_RESOURCE_ID }}
        CREATED_CONSENT_ID: ${{ steps.create-service-user-consent.outputs.CREATED_CONSENT_ID }}
      run: |
        getConsentApiResponse=$(aws apigateway test-invoke-method \
          --region "$AWS_REGION" \
          --rest-api-id "$API_GATEWAY_ID" \
          --resource-id "$CONSENT_API_RESOURCE_ID" \
          --http-method GET \
          --path-with-query-string "v1/consent-management/services/TestServiceId/users/TestUserId/consents/${CREATED_CONSENT_ID}")
        if [ "$(echo "${getConsentApiResponse}" | jq -e '.status == 200')" == "true" ]; then
          echo "GetServiceUserConsent API invocation succeeded"
        else
          echo "GetServiceUserConsent API invocation failed, response: ${getConsentApiResponse}"
          exit 1
        fi
        getConsentApiResponse=$(echo ${getConsentApiResponse} | jq '.body')
        returnedConsentData=$(echo ${getConsentApiResponse} | sed 's/\\"/"/g' | sed 's/^"//;s/"$//' | jq .data)
        if [ "$(echo "${returnedConsentData}" | jq 'type == "object"')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: did not return a consent object"
          echo "GetServiceUserConsent API response body: ${getConsentApiResponse}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq --arg expectedConsentId "$CREATED_CONSENT_ID" '.consentId == $expectedConsentId')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: consent data did not match expected consentId ${CREATED_CONSENT_ID}"
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.status == "REVOKED"')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: consent data did not match expected status \"REVOKED\""
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.consentType == "testConsentType"')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: consent data did not match expected consentType \"testConsentType\""
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.consentVersion == 1')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: consent data did not match expected consentVersion 1"
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.consentData == {"testKey1":"testValue1","testKey2":"testValue2"}')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: consent data did not match expected consentData {\"testKey1\":\"testValue1\",\"testKey2\":\"testValue2\"}"
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        echo "GetServiceUserConsent API validation passed: successfully returned the expected consent"
      shell: bash

    - name: Test UpdateServiceUserConsent API
      env:
        API_GATEWAY_ID: ${{ steps.get-consent-management-api-gateway-id.outputs.CONSENT_MANAGEMENT_API_GATEWAY_ID }}
        AWS_REGION: ${{ inputs.aws-region }}
        CONSENT_API_RESOURCE_ID: ${{ steps.get-consent-management-api-resource-ids.outputs.CONSENT_API_RESOURCE_ID }}
        CREATED_CONSENT_ID: ${{ steps.create-service-user-consent.outputs.CREATED_CONSENT_ID }}
      run: |
        updateConsentApiResponse=$(aws apigateway test-invoke-method \
          --region "$AWS_REGION" \
          --rest-api-id "$API_GATEWAY_ID" \
          --resource-id "$CONSENT_API_RESOURCE_ID" \
          --http-method POST \
          --path-with-query-string "v1/consent-management/services/TestServiceId/users/TestUserId/consents/${CREATED_CONSENT_ID}" \
          --body "{\"status\":\"ACTIVE\",\"consentVersion\":2,\"consentData\":{\"testKey1\":\"testValue1_v2\",\"testKey3\":\"testValue3\"}}")
        if [ "$(echo "${updateConsentApiResponse}" | jq -e '.status == 200')" == "true" ]; then
          echo "UpdateServiceUserConsent API invocation succeeded"
        else
          echo "UpdateServiceUserConsent API invocation failed, response: ${updateConsentApiResponse}"
          exit 1
        fi
        getConsentApiResponse=$(aws apigateway test-invoke-method \
          --region "$AWS_REGION" \
          --rest-api-id "$API_GATEWAY_ID" \
          --resource-id "$CONSENT_API_RESOURCE_ID" \
          --http-method GET \
          --path-with-query-string "v1/consent-management/services/TestServiceId/users/TestUserId/consents/${CREATED_CONSENT_ID}")
        if [ "$(echo "${getConsentApiResponse}" | jq -e '.status == 200')" == "true" ]; then
          echo "GetServiceUserConsent API invocation succeeded"
        else
          echo "GetServiceUserConsent API invocation failed, response: ${getConsentApiResponse}"
          exit 1
        fi
        getConsentApiResponse=$(echo ${getConsentApiResponse} | jq '.body')
        returnedConsentData=$(echo ${getConsentApiResponse} | sed 's/\\"/"/g' | sed 's/^"//;s/"$//' | jq .data)
        if [ "$(echo "${returnedConsentData}" | jq 'type == "object"')" != "true" ]; then
          echo "GetServiceUserConsent API validation after update failed: did not return a consent object"
          echo "GetServiceUserConsent API response body: ${getConsentApiResponse}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq --arg expectedConsentId "$CREATED_CONSENT_ID" '.consentId == $expectedConsentId')" != "true" ]; then
          echo "GetServiceUserConsent API validation after update failed: consent data did not match expected consentId ${CREATED_CONSENT_ID}"
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.status == "ACTIVE"')" != "true" ]; then
          echo "GetServiceUserConsent API validation after update failed: consent data did not match expected status \"ACTIVE\""
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.consentVersion == 2')" != "true" ]; then
          echo "GetServiceUserConsent API validation after update failed: consent data did not match expected consentVersion 2"
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        if [ "$(echo "${returnedConsentData}" | jq '.consentData == {"testKey1":"testValue1_v2","testKey3":"testValue3"}')" != "true" ]; then
          echo "GetServiceUserConsent API validation failed: consent data did not match expected consentData {\"testKey1\":\"testValue1_v2\",\"testKey3\":\"testValue3\"}"
          echo "GetServiceUserConsent API response consent data: ${returnedConsentData}"
          exit 1
        fi
        echo "GetServiceUserConsent API validation after update passed: successfully returned the expected consent"
      shell: bash

    - name: Test ListServiceUserConsents API
      env:
        API_GATEWAY_ID: ${{ steps.get-consent-management-api-gateway-id.outputs.CONSENT_MANAGEMENT_API_GATEWAY_ID }}
        AWS_REGION: ${{ inputs.aws-region }}
        CONSENTS_API_RESOURCE_ID: ${{ steps.get-consent-management-api-resource-ids.outputs.CONSENTS_API_RESOURCE_ID }}
        CREATED_CONSENT_ID: ${{ steps.create-service-user-consent.outputs.CREATED_CONSENT_ID }}
      run: |
        listApiResponse=$(aws apigateway test-invoke-method \
          --region "$AWS_REGION" \
          --rest-api-id "$API_GATEWAY_ID" \
          --resource-id "$CONSENTS_API_RESOURCE_ID" \
          --http-method GET \
          --path-with-query-string "v1/consent-management/services/TestServiceId/users/TestUserId/consents")
        if [ "$(echo ${listApiResponse} | jq -e '.status == 200')" == "true" ]; then
          echo "ListServiceUserConsents API invocation succeeded"
        else
          echo "ListServiceUserConsents API invocation failed, response: ${listApiResponse}"
          exit 1
        fi
        listApiResponseBody=$(echo ${listApiResponse} | jq '.body')
        returnedConsents=$(echo ${listApiResponseBody} | sed 's/\\"/"/g' | sed 's/^"//;s/"$//' | jq .data)
        if [ "$(echo "${returnedConsents}" | jq 'type == "array"')" != "true" ]; then
          echo "ListServiceUserConsents API validation failed: did not return an array of consents"
          echo "ListServiceUserConsents API response body: ${listApiResponseBody}"
          exit 1
        fi
        consentWithExpectedId=$(echo $returnedConsents | jq --arg expectedConsentId "$CREATED_CONSENT_ID" '.[] | select(.consentId == $expectedConsentId)')
        if [ "$(echo "${consentWithExpectedId}" | jq 'type == "object"')" != "true" ]; then
          echo "ListServiceUserConsents API validation failed: did not include expected consent with consentId ${CREATED_CONSENT_ID}"
          echo "ListServiceUserConsents API response body: ${listApiResponseBody}"
          exit 1
        fi
        echo "ListServiceUserConsents API validation passed: successfully returned array of consents including the created consent"
      shell: bash

    - name: Retrieve API Gateway ID for the Consent History API
      id: get-consent-history-api-gateway-id
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        apiGatewayId=$(aws cloudformation list-exports \
          --region "$AWS_REGION" \
          --query "Exports[?Name == 'ConsentHistoryApiGatewayId'].Value" \
          | jq .[0] --raw-output)
        echo "CONSENT_HISTORY_API_GATEWAY_ID=${apiGatewayId}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Get API Gateway resource IDs for the Consent History API
      id: get-consent-history-api-resource-ids
      env:
        API_GATEWAY_ID: ${{ steps.get-consent-history-api-gateway-id.outputs.CONSENT_HISTORY_API_GATEWAY_ID }}
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        apiGatewayResources=$(aws apigateway get-resources \
          --region "$AWS_REGION" \
          --rest-api-id "$API_GATEWAY_ID")
        getHistoryForConsentResourceId=$(echo ${apiGatewayResources} | \
          jq '.items.[] | select(.path == "/v1/consent-history/services/{serviceId}/users/{userId}/consents/{consentId}") | .id' --raw-output)
        echo "HISTORY_FOR_CONSENT_API_RESOURCE_ID=${getHistoryForConsentResourceId}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Test GetHistoryForConsent API
      env:
        API_GATEWAY_ID: ${{ steps.get-consent-history-api-gateway-id.outputs.CONSENT_HISTORY_API_GATEWAY_ID }}
        AWS_REGION: ${{ inputs.aws-region }}
        HISTORY_FOR_CONSENT_API_RESOURCE_ID: ${{ steps.get-consent-history-api-resource-ids.outputs.HISTORY_FOR_CONSENT_API_RESOURCE_ID }}
        CREATED_CONSENT_ID: ${{ steps.create-service-user-consent.outputs.CREATED_CONSENT_ID }}
      run: |
        getHistoryApiResponse=$(aws apigateway test-invoke-method \
          --region "$AWS_REGION" \
          --rest-api-id "$API_GATEWAY_ID" \
          --resource-id "$HISTORY_FOR_CONSENT_API_RESOURCE_ID" \
          --http-method GET \
          --path-with-query-string "v1/consent-history/services/TestServiceId/users/TestUserId/consents/${CREATED_CONSENT_ID}")
        if [ "$(echo ${getHistoryApiResponse} | jq -e '.status == 200')" == "true" ]; then
          echo "GetHistoryForConsent API invocation succeeded"
        else
          echo "GetHistoryForConsent API invocation failed, response: ${getHistoryApiResponse}"
          exit 1
        fi
        getConsentHistoryApiResponseBody=$(echo ${getHistoryApiResponse} | jq '.body')
        returnedHistoryRecords=$(echo ${getConsentHistoryApiResponseBody} | sed 's/\\"/"/g' | sed 's/^"//;s/"$//' | jq .data)
        if [ "$(echo "${returnedHistoryRecords}" | jq 'type == "array"')" != "true" ]; then
          echo "GetHistoryForServiceUserConsent API validation failed: did not return an array of consents"
          echo "GetHistoryForServiceUserConsent API response body: ${getConsentHistoryApiResponseBody}"
          exit 1
        fi
        if [ "$(echo "${returnedHistoryRecords}" | jq 'length')" -lt 1 ]; then
          echo "GetHistoryForServiceUserConsent API validation failed: did not return any history records"
          echo "GetHistoryForServiceUserConsent API response body: ${getConsentHistoryApiResponseBody}"
          exit 1
        fi
        expectedConsentId="TestServiceId|TestUserId|${CREATED_CONSENT_ID}"
        firstHistoryRecordConsentId=$(echo ${returnedHistoryRecords} | jq -r '.[0].consentId')
        if [ "${firstHistoryRecordConsentId}" != "${expectedConsentId}" ]; then
          echo "GetHistoryForServiceUserConsent API validation failed: expected history record consentId to be ${expectedConsentId} but was ${firstHistoryRecordConsentId}"
          echo "GetHistoryForServiceUserConsent API response body: ${getConsentHistoryApiResponseBody}"
          exit 1
        fi
        firstHistoryRecordEventType=$(echo ${returnedHistoryRecords} | jq -r '.[0].eventType')
        if [ "${firstHistoryRecordEventType}" != "INSERT" ]; then
          echo "GetHistoryForServiceUserConsent API validation failed: expected first history record to have eventType \"INSERT\" but was ${firstHistoryRecordEventType}"
          echo "GetHistoryForServiceUserConsent API response body: ${getConsentHistoryApiResponseBody}"
          exit 1
        fi
        secondHistoryRecordEventType=$(echo ${returnedHistoryRecords} | jq -r '.[1].eventType')
        if [ "${secondHistoryRecordEventType}" != "MODIFY" ]; then
          echo "GetHistoryForServiceUserConsent API validation failed: expected second history record to have eventType \"MODIFY\" but was ${secondHistoryRecordEventType}"
          echo "GetHistoryForServiceUserConsent API response body: ${getConsentHistoryApiResponseBody}"
          exit 1
        fi
        echo "GetHistoryForServiceUserConsent API validation passed: successfully returned expected history records for the created consent"
      shell: bash
