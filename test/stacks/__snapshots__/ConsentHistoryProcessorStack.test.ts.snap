// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConsentHistoryProcessorStack creates the expected CloudFormation template from CDK 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ConsentHistoryProcessorLambdaB5C5B4EA": {
      "DependsOn": [
        "ConsentHistoryProcessorLambdaServiceRoleDefaultPolicy8D3A3652",
        "ConsentHistoryProcessorLambdaServiceRoleE9DE128F",
      ],
      "Properties": {
        "Description": "Consent History Processor Lambda",
        "Environment": {
          "Variables": {
            "CONSENT_HISTORY_TABLE_NAME": {
              "Fn::ImportValue": "ConsentHistoryDataStack:ExportsOutputRefServiceUserConsentHistoryDynamoDBTable552A6381B31C842F",
            },
            "STAGE": "prod",
          },
        },
        "Handler": "com.consentframework.consenthistory.consentingestor.ConsentStreamIngestor::handleRequest",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ConsentHistoryProcessorLambdaLogGroup9C3AC52E",
          },
        },
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "ConsentHistoryProcessorLambdaServiceRoleE9DE128F",
            "Arn",
          ],
        },
        "Runtime": "java21",
        "SnapStart": {
          "ApplyOn": "PublishedVersions",
        },
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ConsentHistoryProcessorLambdaDlqDC3A95FE": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "MessageRetentionPeriod": 1209600,
        "QueueName": "ConsentHistoryProcessorLambdaDlq",
        "SqsManagedSseEnabled": true,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "ConsentHistoryProcessorLambdaDynamoDBEventSourceConsentDataStackServiceUserConsentDynamoDBTableC8F30629019F7AE6": {
      "Properties": {
        "BatchSize": 100,
        "DestinationConfig": {
          "OnFailure": {
            "Destination": {
              "Fn::GetAtt": [
                "ConsentHistoryProcessorLambdaDlqDC3A95FE",
                "Arn",
              ],
            },
          },
        },
        "EventSourceArn": {
          "Fn::ImportValue": "ConsentDataStack:ExportsOutputFnGetAttServiceUserConsentDynamoDBTable7EDF0878StreamArn3303655F",
        },
        "FunctionName": {
          "Ref": "ConsentHistoryProcessorLambdaB5C5B4EA",
        },
        "StartingPosition": "TRIM_HORIZON",
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "ConsentHistoryProcessorLambdaLogGroup9C3AC52E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "ConsentHistoryProcessorLambda-ApplicationLogs",
        "RetentionInDays": 545,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ConsentHistoryProcessorLambdaServiceRoleDefaultPolicy8D3A3652": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:PutMetricData",
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "CloudWatchMetricsPermissions",
            },
            {
              "Action": "dynamodb:ListStreams",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::ImportValue": "ConsentDataStack:ExportsOutputFnGetAttServiceUserConsentDynamoDBTable7EDF0878StreamArn3303655F",
              },
            },
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ConsentHistoryProcessorLambdaDlqDC3A95FE",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::ImportValue": "ConsentHistoryDataStack:ExportsOutputFnGetAttServiceUserConsentHistoryDynamoDBTable552A6381Arn5A6BE492",
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ConsentHistoryProcessorLambdaServiceRoleDefaultPolicy8D3A3652",
        "Roles": [
          {
            "Ref": "ConsentHistoryProcessorLambdaServiceRoleE9DE128F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ConsentHistoryProcessorLambdaServiceRoleE9DE128F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
